#import tkinter as tk
from tkinter import filedialog
import skimage
import os
import pathlib


def get_filepath_dialog():
    file_path = filedialog.askopenfilename()
    return file_path


def get_directory_dialog():
    parent_dir = filedialog.askdirectory()
    return parent_dir


def extract_parent_dir(file_path):
    parent_dir = pathlib.Path(file_path)
    parent_dir = parent_dir.parent.absolute()
    return parent_dir


def get_file_list(parent_dir):
    file_list = os.listdir(parent_dir)
    return file_list


def rename_file(file, suffix):

    """
    Appends a suffix to a given filename with extension, returning `filename-suffix.extension`

    Args:
        file: str, filename with extension, no path
        suffix: str, filename with added suffix and extension, no path

    Returns: str, filename with the desired suffix appended to it, preceding file extension.

    """

    # creating a list of directories to extract certain partial directories and the filename
    temp = file.split("/")
    dir_in = temp[-2]
    name_ext = temp[-1]

    # create the name of the output directory
    parent_dir = ""
    for dir_part in temp[:-2]:
        parent_dir += dir_part + "/"
    dir_suffixed = dir_in + "-" + suffix + "/"
    dir_out = parent_dir + dir_suffixed

    # creates the dedicated output directory if it doesn't exist
    os.mkdir(dir_out) if not os.path.exists(dir_out) else None

    # create the file_out name, including its full absolute path, added suffix and file extension
    names = name_ext.split(".")
    extension = names[-1]
    name = ""
    for part in names[:-1]:
        name += part + "."
    name = name.strip(".")
    name_out = name + "-" + suffix  # output filename without extension but with suffix describing processing operation
    name_out_ext = name_out + "." + extension
    file_out = dir_out + name_out_ext

    return file_out


def export_file(image, filename):
    """
    Exports a numpy.ndarray (e.g., a tif z stack) to .tif format.
    Args:
        image: numpy.ndarray (e.g., a formatted RGB24 TIFF z stack)
        filename: filename preceded by the absolute path where it is to be saved

    Returns: nothing (0)
    """

    skimage.io.imsave(filename, image)  # , photometric='minisblack'

    print(image.shape)
    print("export_tif(): File created: {}".format(filename))
    return 0


if __name__ == "__main__":

    # tkinter notes
    """
    # tell python / tkinter explicitly to initialise the window creation process (and hide the init window)
    root = tk.Tk()
    root.withdraw()"""

    # file reading dialog notes
    """file_path = filedialog.askopenfilename()
    parent_dir = filedialog.askdirectory()
    print(file_path)

    parent_dir = pathlib.Path(file_path)
    parent_dir = parent_dir.parent.absolute()
    print(parent_dir)

    file_list = os.listdir(parent_dir)
    for file in file_list:
        print("," + file + ".")"""

    """
    file_path = get_filepath_dialog()  # str, path with slashes
    print("file path from dialog:", file_path)
    print(type(file_path))

    directory = get_directory_dialog()  # str, path with slashes, no trailing "/"
    print("directory with path from dialog:", directory)
    print(type(directory))
    """

    parent_dir = extract_parent_dir(get_filepath_dialog())  # pathlib.WindowsPath, path with backslashes, no trailing "\"
    print("extracted parent directory from file path:", parent_dir)
    print(type(parent_dir))

    parent_dir_str = str(parent_dir)
    print(parent_dir_str)
    print(type(parent_dir_str))

    file_list = get_file_list(parent_dir)
    print("file list in the given directory (regardless of filetype) " + parent_dir_str + ":")
    for file in file_list:
        print("  " + file)
        print(type(file))

    exit(0)
