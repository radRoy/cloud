# Sample configuration file for training a 3D U-Net on a task of predicting the boundaries in 3D stack of the Arabidopsis lateral root
# acquired with the lightsheet microscope. Training done with a combination of Binary Cross-Entropy and DiceLoss.
# Download training data from: https://osf.io/9x3g2/
# Download validation data from: https://osf.io/vs6gb/
# Download test data from: https://osf.io/tn4xj/
model:
  name: ResidualUNet3D
  # number of input channels to the model
  in_channels: 3
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (crg - Conv3d+ReLU+GroupNorm)
  layer_order: gcr
  # initial number of feature maps
  f_maps: 32
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
# loss function to be used during training
loss:
  name: BCEDiceLoss
  # a target value that is ignored and does not contribute to the input gradient
  ignore_index: null
  # skip the last channel in the target (i.e. when last channel contains data not relevant for the loss)
  skip_last_target: true
optimizer:
  # initial learning rate
  learning_rate: 0.0002
  # weight decay
  weight_decay: 0.00001
# evaluation metric
eval_metric:
  # use AdaptedRandError metric
  name: BoundaryAdaptedRandError
  # probability maps threshold
  threshold: 0.4
  # use the last target channel to compute the metric
  use_last_target: true
  # use only the first channel for computing the metric
  use_first_input: true
lr_scheduler:
  name: ReduceLROnPlateau
  # make sure to use the 'min' mode cause lower AdaptedRandError is better
  mode: min
  factor: 0.5
  patience: 10
trainer:
  # model with lower eval score is considered better
  eval_score_higher_is_better: False
  # path to the checkpoint directory
  checkpoint_dir: /home/dwalth/data/outputs/chpt-230901-11
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  resume: null
  # path to the best_checkpoint.pytorch; to be used for fine-tuning the model with additional ground truth
  # make sure to decrease the learning rate in the optimizer config accordingly
  pre_trained: null
  # how many iterations between validations (originally: 1000) (in first working train run (single channel data): 100)
  validate_after_iters: 100
  # how many iterations between tensorboard logging (originally: 500) (in first working train run (single channel data): 25)
  log_after_iters: 25
  # max number of epochs (originally: 1000) (in first working train run (single channel data): 5000)
  max_num_epochs: 5000
  # max number of iterations (originally: 150000)
  max_num_iterations: 150000
# Configure training and validation loaders
loaders:
  # how many subprocesses to use for data loading (originally: 8, but optimum depends on hardware spec.s)
  num_workers: 8
  # path to the raw data within the H5 (originally: /raw)
  raw_internal_path: /raw
  # path to the the label data withtin the H5 (originally: /label)
  label_internal_path: /label
  # configuration of the train loader
  train:
    # path to the training datasets
    file_paths:
    - /home/dwalth/scratch/datasets/dataset03/raw-cropNorm-bicubic-scaled0.25-autofluo-multiChannel(CZYX)-Ch405,488,561nm-h5/train/

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      name: FilterSliceBuilder
      # patch & stride shape stuff, debugging, etc.:
        # 
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better) (originally: [80, 170, 170], but depends on the input data)
      patch_shape: [80,416,176]  # dataset03 resolution: 125,1169,414
      # train stride between patches (originally: [20, 40, 40]) (in [z, y, x])
      stride_shape: [16,368,112]
      # minimum volume of the labels in the patch (QU: unit of measurement? pixels? um?)
      threshold: 0.6
      # probability of accepting patches which do not fulfil the threshold criterion
      slack_acceptance: 0.01

    transformer:
      raw:
        - name: Standardize
        - name: RandomFlip
        - name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY plane due to anisotropy
          axes: [[2, 1]]
          angle_spectrum: 45
          mode: reflect
        - name: ElasticDeformation
          spline_order: 3
        - name: GaussianBlur3D
          execution_probability: 0.5
        - name: AdditiveGaussianNoise
          execution_probability: 0.2
        - name: AdditivePoissonNoise
          execution_probability: 0.2
        - name: ToTensor
          expand_dims: true
      label:
        - name: RandomFlip
        - name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY plane due to anisotropy
          axes: [[2, 1]]
          angle_spectrum: 45
          mode: reflect
        - name: ElasticDeformation
          spline_order: 0
        - name: StandardLabelToBoundary
          # append original ground truth labels to the last channel (to be able to compute the eval metric)
          append_label: true
        - name: ToTensor
          expand_dims: false

  # configuration of the val loader
  val:
    # path to the val datasets
    file_paths:
      - /home/dwalth/scratch/datasets/dataset03/raw-cropNorm-bicubic-scaled0.25-autofluo-multiChannel(CZYX)-Ch405,488,561nm-h5/val/

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch  # QU: Why is this section duplicated? does not make much sense to me to give two different patch_shapes &/ stride_shapes...
    slice_builder:
      name: FilterSliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [80,416,176]  # dataset03 resolution: 125,1169,414
      # train stride between patches
      stride_shape: [16,368,112]
      # minimum volume of the labels in the patch
      threshold: 0.6
      # probability of accepting patches which do not fulfil the threshold criterion
      slack_acceptance: 0.01

    # data augmentation
    transformer:
      raw:
        - name: Standardize
        - name: ToTensor
          expand_dims: true
      label:
        - name: StandardLabelToBoundary
          append_label: true
        - name: ToTensor
          expand_dims: false
